import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;

/**
 * This class represents questions used by IVoteService objects.  Each Question object stores a string for the question
 * text as well as maps of answers to voters and answers to total votes for that answer.
 *
 * @param <T> Answer type that this question accepts.
 */
public class Question<T> {
    private int id;
    private String questionText;
    private String[] answersText;
    private Map<Voter, Answer> votes;
    private Map<Answer, Integer> totals;

    public Question(String q, String[] a) {
        this.questionText = q;
        this.answersText = a;
        id = q.hashCode();
        this.votes = (Map<Voter, Answer>) new TreeMap<Voter, T>();
        this.totals = new TreeMap<Answer, Integer>();
    }

    /**
     * Adds the vote to the map of voters to answers and increments the total for that answer.
     * @param v Vote object containing a Voter object and an Answer object.
     */
    public void add(Vote v) {
        // Add the vote to the map of voters and their answers.
        this.votes.put(v.getVoter(), v.getAnswer());
        // Increment the answer total in the totals map.  If the answer does not exist in the map, add it.
        if (this.totals.containsKey(v.getAnswer())) {
            Integer numAnswers = this.totals.get(v.getAnswer());
            totals.put(v.getAnswer(), (numAnswers + 1));
        } else {
            this.totals.put(v.getAnswer(), 1);
        }
    }

    /**
     * @return A clone of the map containing the votes.  Vote and Voter objects objects are not cloned.
     */
    public Map<Voter, Answer> getVotes() {
        return (Map<Voter, Answer>) ((TreeMap<Voter, Answer>) this.votes).clone();
    }

    /**
     * @return A clone of the map containing the vote totals. Elements in the map are not cloned.
     */
    public Map<Answer, Integer> getTotals() {
        return (Map<Answer, Integer>) ((TreeMap<Answer, Integer>) this.totals).clone();
    }

    /**
     * @return The hash code generated by running Java's hashCode() method on the question string;
     */
    public int getId() {
        return id;
    }

    /**
     * @return The question string.
     */
    public String getQuestionText() {
        return questionText;
    }

    /**
     * @return String array of the answer options.
     */
    public String[] getAnswersText() {
        return Arrays.copyOf(this.answersText, this.answersText.length);
    }

    /**
     * @return The number of answer options for this question.
     */
    public int getNumAnswers() {
        return this.answersText.length;
    }
}
